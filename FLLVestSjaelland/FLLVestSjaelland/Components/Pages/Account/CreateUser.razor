@page "/Account/OpretBruger"

@* Imports *@
@using FLLVestSjaelland.Account
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@* Dependencies injection *@
@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager



<h3>CreateUser</h3>
@* Tjekker om alle intastede informationer er valide, når der trykkes "Opret" - en sej div *@
<EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
    <div class="form-floating mb-3">
        <InputText @bind-Value="Input.Username" class="form-control" autocomplete="username" aria-required="true" placeholder="Brugernavn" />
        <label for="Brugernavn">Brugernavn</label>
        <ValidationMessage For="() => Input.Username" class="text-danger" />
    </div>
    <div class="form-floating mb-3">
        <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Kode" />
        <label for="Adgangskode">Adgangskode</label>
        <ValidationMessage For="() => Input.Password" class="text-danger" />
    </div>
    <button type="submit" class="w-100 btn btn-lg btn-primary">Opret Bruger</button>
</EditForm>


@code {
    //Variabler
    [Parameter]
    [SupplyParameterFromQuery(Name = "ReturnUrl")]
    public string? ReturnUrl { get; set; }

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();


    //Metoden der opretter brugeren
    public async Task RegisterUser()
    {
        //Opretter in instands af en ApplicationUser (en bruger)
        var user = CreateApplicationUser();

        //Vi giver brugeren et brugernavn
        await UserStore.SetUserNameAsync(user, Input.Username, CancellationToken.None);

        //Brugeren oprettes i databasen
        var result = await UserManager.CreateAsync(user, Input.Password);

        //Hvis dette ikke lykkes stoppes motoden
        if (!result.Succeeded)
        {
            return;
        }

        //Brugen logges ind
        await SignInManager.SignInAsync(user, isPersistent: false);

        //Der vendes tilbage til siden brugen logger ind på
        RedirectManager.RedirectTo(ReturnUrl);
    }

    //Metoden til at lave en ApplicationUser
    private ApplicationUser CreateApplicationUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    //Privat klasse til at håndtere input data
    private sealed class InputModel
    {
        [Required]
        public string Username { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";
    }
}
