@page "/Account/OpretBruger"

@using FLLVestSjaelland.Account
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager



<h3>CreateUser</h3>

<EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
    <div class="form-floating mb-3">
        <InputText @bind-Value="Input.Username" class="form-control" autocomplete="username" aria-required="true" placeholder="Username" />
        <label for="email">Email</label>
        <ValidationMessage For="() => Input.Username" class="text-danger" />
    </div>
    <div class="form-floating mb-3">
        <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Password" />
        <label for="password">Password</label>
        <ValidationMessage For="() => Input.Password" class="text-danger" />
    </div>
    <button type="submit" class="w-100 btn btn-lg btn-primary">Opret</button>
</EditForm>

@* <InputText @bind-Value="Username" placeholder="Username" class="shadow-lg border border-1 border-black rounded" /> *@

@* <InputText @bind-Value="Password" type="password" placeholder="Password" class="shadow-lg border border-1 border-black rounded" /> *@

@* <button class="shadow-lg border border-1 border-black rounded hover:cursor-pointer" @onclick="RegisterUser"> *@
@*     Opret Bruger *@
@* </button> *@

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "ReturnUrl")]
    public string? ReturnUrl { get; set; }

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();



    public async Task RegisterUser()
    {
        var user = CreateApplicationUser();

        await UserStore.SetUserNameAsync(user, Input.Username, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            return;
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateApplicationUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private sealed class InputModel
    {
        [Required]
        public string Username { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";
    }
}
