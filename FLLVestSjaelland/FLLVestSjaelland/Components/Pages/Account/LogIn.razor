@page "/Account/Login"
@rendermode InteractiveServer
@using FLLVestSjaelland.Account
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@inject IdentityRedirectManager RedirectManager
@inject SignInManager<ApplicationUser> SignInManager

<h3>LogIn</h3>
<InputText @bind-Value="Username" placeholder="Username" class="shadow-lg border border-1 border-black rounded"/>

<InputText @bind-Value="Password" type="password" placeholder="Password" class="shadow-lg border border-1 border-black rounded" />

<button class="shadow-lg border border-1 border-black rounded hover:cursor-pointer" @onclick="LoginBruger">
	Login
</button>


<button @onclick="RedirectToUserCreation">
	Ingen bruger? Opret her
</button>

@code {
	[Parameter]
	[SupplyParameterFromQuery(Name = "ReturnUrl")]
	public string? ReturnUrl{ get; set; }
	[CascadingParameter]
	private HttpContext HttpContext { get; set; } = default!;


	private string Username = "";
	private string Password = "";

	protected override async Task OnInitializedAsync()
	{

		if (HttpContext != null && HttpMethods.IsGet(HttpContext.Request.Method))
		{
			await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
		}
	}

	private async void LoginBruger()
	{
		var result = await SignInManager.PasswordSignInAsync(Username, Password, false, lockoutOnFailure: false);

		if(result.Succeeded)
		{			
			RedirectManager.RedirectTo(ReturnUrl);
		}
	}
	private void RedirectToUserCreation(MouseEventArgs args)
	{
		RedirectManager.RedirectTo($"/OpretBruger?ReturnUrl={ReturnUrl}");
	}
}
